# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET           /                                                                controllers.Application.index
GET           /processes                                                       controllers.Application.processes
GET           /processes/:processId                                            controllers.Application.processDetail(processId)
GET           /processes/:processId/graph                                      controllers.Application.processGraph(processId)
GET           /process_definitions                                             controllers.Application.processDefinitions
GET           /process_definitions/:processDefinitionName                      controllers.Application.processDefinition(processDefinitionName)
GET           /tasks/:taskId/logs                                              controllers.Application.taskLogs(taskId)
GET           /processes/:processId/livelogs                                   controllers.LiveLogs.logs(processId)
POST          /processes/:processId/livelogs/data                              controllers.LiveLogs.logsData(processId)

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                                    controllers.Assets.at(path="/public", file)


# Generated by apidoc - http://www.apidoc.me
# Service version: 0.0.11
# apidoc:0.11.76 http://www.apidoc.me/gilt/svc-sundial/0.0.11-dev/play_2_x_routes

GET        /_internal_/metrics                                       controllers.Healthchecks.getMetrics()
GET        /processes/                                               controllers.Processes.get(process_definition_name: _root_.scala.Option[String], start_time: _root_.scala.Option[_root_.org.joda.time.DateTime], end_time: _root_.scala.Option[_root_.org.joda.time.DateTime], max_records: _root_.scala.Option[Int], allowed_statuses: List[com.gilt.svc.sundial.v0.models.ProcessStatus])
GET        /processes/:process_id                                    controllers.Processes.getByProcessId(process_id: _root_.java.util.UUID)
POST       /processes/:process_id/retry                              controllers.Processes.postRetryByProcessId(process_id: _root_.java.util.UUID)
POST       /processes/:process_id/kill                               controllers.Processes.postKillByProcessId(process_id: _root_.java.util.UUID)
GET        /process_definitions/                                     controllers.ProcessDefinitions.get()
GET        /process_definitions/:process_definition_name             controllers.ProcessDefinitions.getByProcessDefinitionName(process_definition_name: String)
PUT        /process_definitions/:process_definition_name             controllers.ProcessDefinitions.putByProcessDefinitionName(process_definition_name: String)
DELETE     /process_definitions/:process_definition_name             controllers.ProcessDefinitions.deleteByProcessDefinitionName(process_definition_name: String)
POST       /process_definitions/:process_definition_name/trigger     controllers.ProcessDefinitions.postTriggerByProcessDefinitionName(process_definition_name: String, task_definition_name: _root_.scala.Option[String])
POST       /process_definitions/:process_definition_name/pause       controllers.ProcessDefinitions.postPauseByProcessDefinitionName(process_definition_name: String)
POST       /process_definitions/:process_definition_name/resume      controllers.ProcessDefinitions.postResumeByProcessDefinitionName(process_definition_name: String)
GET        /tasks/                                                   controllers.Tasks.get(process_definition_name: String, task_definition_name: String, allowed_statuses: List[com.gilt.svc.sundial.v0.models.TaskStatus], start_time: _root_.scala.Option[_root_.org.joda.time.DateTime], end_time: _root_.scala.Option[_root_.org.joda.time.DateTime], limit: _root_.scala.Option[Int])
POST       /tasks/:task_id/log_entries                               controllers.Tasks.postLogEntriesByTaskId(task_id: _root_.java.util.UUID)
POST       /tasks/:task_id/metadata                                  controllers.Tasks.postMetadataByTaskId(task_id: _root_.java.util.UUID)
POST       /tasks/:task_id/succeed                                   controllers.Tasks.postSucceedByTaskId(task_id: _root_.java.util.UUID)
POST       /tasks/:task_id/fail                                      controllers.Tasks.postFailByTaskId(task_id: _root_.java.util.UUID)
